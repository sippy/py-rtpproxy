# force run: 1
os: linux
language: c
python:
  - "3.6"
before_install:
    - sh -x ./scripts/ft-before_install.sh
#    - sudo -H PATH="${PATH}:/usr/local/clang-3.4/bin" pip3 install -r requirements.txt
env:
  global:
    - COVERALLS_PARALLEL=true
    # The next declaration is the encrypted COVERITY_SCAN_TOKEN, created
    #   via the "travis encrypt" command using the project repo's public key
    - secure: "MUzUSD/uRmjvh0oKBSlKfNkQnPGiN0l4TeKY1nehQQB4h6WiOlVbAu1PCUxR9G/DOmVMLUasWTEB9j5H9hWsvR1MwNge7woHtuW6YmUxw4/+Sh2pOqMIjwpqywFXtY/zfXa8AGpQI0ZOR0eg1mMq/6OV23pkOz9XnfqwvHtVvxs="
script: sh -x ./scripts/do-test.sh ${TTYPE}
after_success:
  - for f in `make -f tests/Makefile list_tests`;
    do
      cat tests/${f}.log;
    done
  - sh -x ./scripts/submit-coverage.sh
notifications:
  webhooks: https://coveralls.io/webhook

stages:
  - name: Build Documentation
    if: (branch != master OR type != push) AND branch != improve_coverage
  - name: Build & Deploy Documentation
    if: branch = master AND type = push
  - name: Update Coverity Report
    if: branch = master AND type = cron
jobs:
  include:
    - name: "Naked Build @ Ubuntu 16 GCC 7"
      dist: xenial
      compiler: gcc
      env:
        - TTYPE=cleanbuild
      before_install: true
      after_success: true
    - name: "Naked Build @ Ubuntu 18 GCC 7"
      dist: bionic
      compiler: gcc
      env:
        - TTYPE=cleanbuild
      before_install: true
      after_success: true
    - name: "Naked Build @ Ubuntu 16 Clang 7"
      dist: xenial
      compiler: clang
      env:
        - TTYPE=cleanbuild
      before_install: true
      after_success: true
    - name: "Naked Build @ Ubuntu 18 Clang 7"
      dist: bionic
      compiler: clang
      env:
        - TTYPE=cleanbuild
      before_install: true
      after_success: true
    - name: "Naked Build @ Ubuntu 18 Clang 9+LTO"
      dist: bionic
      compiler: clang
      env:
        - TTYPE=cleanbuild
        - CC=clang-9 AR=llvm-ar-9 RANLIB=llvm-ranlib-9
        - CONFIGURE_ARGS=--enable-lto
      before_install:
        - sudo -H DEBIAN_FRONTEND=noninteractive apt-get update
        - sudo apt-get -y install clang-9 llvm-9-dev libc++-9-dev libc++abi-9-dev
      after_success: true

    - name: "All-Dependencies-Inclusive Build @ Ubuntu 16 GCC 7"
      dist: xenial
      compiler: gcc
      env:
        - TTYPE=depsbuild
      before_install:
        - sudo -H DEBIAN_FRONTEND=noninteractive apt-get update
      after_success: true
    - name: "All-Dependencies-Inclusive Build @ Ubuntu 18 GCC 7"
      dist: bionic
      compiler: gcc
      env:
        - TTYPE=depsbuild
      before_install:
        - sudo -H DEBIAN_FRONTEND=noninteractive apt-get update
      after_success: true
    - name: "All-Dependencies-Inclusive Build @ Ubuntu 16 Clang 7"
      dist: xenial
      compiler: clang
      env:
        - TTYPE=depsbuild
      before_install:
        - sudo -H DEBIAN_FRONTEND=noninteractive apt-get update
      after_success: true
    - name: "All-Dependencies-Inclusive Build @ Ubuntu 18 Clang 7"
      dist: bionic
      compiler: clang
      env:
        - TTYPE=depsbuild
      before_install:
        - sudo -H DEBIAN_FRONTEND=noninteractive apt-get update
      after_success: true
    - name: "All-Dependencies-Inclusive Build @ Ubuntu 18 Clang 9+LTO"
      dist: bionic
      compiler: clang
      env:
        - TTYPE=depsbuild
        - CC=clang-9 AR=llvm-ar-9 RANLIB=llvm-ranlib-9
        - CONFIGURE_ARGS=--enable-lto
      before_install:
        - sudo -H DEBIAN_FRONTEND=noninteractive apt-get update
        - sudo apt-get -y install clang-9 llvm-9-dev libc++-9-dev libc++abi-9-dev
      after_success: true

    - name: "Functional Testing @ Ubuntu 16 GCC 7"
      dist: xenial
      compiler: gcc
      env:
        - TTYPE=basic
      before_script:
        - sh -x ./scripts/install_working_nc.sh
    - name: "Functional Testing @ Ubuntu 18 GCC 7"
      dist: bionic
      compiler: gcc
      env:
        - TTYPE=basic
    - name: "Functional Testing @ Ubuntu 16 Clang 7"
      dist: xenial
      compiler: clang
      env:
        - TTYPE=basic
        - GCOV_CMD="llvm-cov gcov"
      before_script:
        - sh -x ./scripts/install_working_nc.sh
    - name: "Functional Testing @ Ubuntu 18 Clang 7"
      dist: bionic
      compiler: clang
      env:
        - TTYPE=basic
        - GCOV_CMD="llvm-cov gcov"
    - name: "Functional Testing @ Ubuntu 18 Clang 9+LTO"
      dist: bionic
      compiler: clang
      env:
        - TTYPE=basic
        - CC=clang-9 AR=llvm-ar-9 RANLIB=llvm-ranlib-9
        - CONFIGURE_ARGS=--enable-lto
        - GCOV_CMD="llvm-cov-9 gcov"
      before_install:
        - sh -x ./scripts/ft-before_install.sh
        - sudo apt-get -y install clang-9 llvm-9-dev libc++-9-dev libc++abi-9-dev

    - name: "Glitching @ Ubuntu 16 GCC 7"
      dist: xenial
      compiler: gcc
      env:
        - TTYPE=glitching
    - name: "Glitching @ Ubuntu 18 GCC 7"
      dist: bionic
      compiler: gcc
      env:
        - TTYPE=glitching
    - name: "Glitching @ Ubuntu 18 Clang 9+LTO"
      dist: bionic
      compiler: clang
      env:
        - TTYPE=glitching
        - CC=clang-9 AR=llvm-ar-9 RANLIB=llvm-ranlib-9
        - CONFIGURE_ARGS=--enable-lto
        - GCOV_CMD="llvm-cov-9 gcov"
      before_install:
        - sh -x ./scripts/ft-before_install.sh
        - sudo apt-get -y install clang-9 llvm-9-dev libc++-9-dev libc++abi-9-dev

    - stage: Build Documentation
      dist: bionic
      name: Build Documentation
      before_install:
        - sudo -H DEBIAN_FRONTEND=noninteractive apt-get update
      script: sh -x ./scripts/do-docbuild.sh
      after_success: true

    - stage: Build & Deploy Documentation
      dist: bionic
      name: Build Documentation and Deploy it to the rtpproxy.org repo
      before_install:
        - sudo -H DEBIAN_FRONTEND=noninteractive apt-get update
      script:
        - sh -x ./scripts/do-docbuild.sh
        - sh -x ./scripts/do-docdeploy.sh
      after_success: true

    - stage: Update Coverity Report
      dist: bionic
      name: Push latest code to scan.coverity.com for analysis
      addons:
        coverity_scan:
          project:
            name: "sippy/rtpproxy"
            description: "A high-performance software proxy for RTP streams"
          notification_email: sobomax@sippysoft.com
          build_command_prepend: "./configure"
          build_command: "make all"
          branch_pattern: master
      before_install:
        - echo -n | openssl s_client -connect scan.coverity.com:443 |
            sed -ne '/-BEGIN CERTIFICATE-/,/-END CERTIFICATE-/p' |
            sudo tee -a /etc/ssl/certs/ca-certificates.crt
      script:
        - true
      after_success: true
